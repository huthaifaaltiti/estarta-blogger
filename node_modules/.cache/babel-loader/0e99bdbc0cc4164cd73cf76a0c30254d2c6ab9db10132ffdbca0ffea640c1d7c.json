{"ast":null,"code":"// blogs reducer constants\nimport * as BLOGS_CONSTANTS from \"./constants\";\nexport const FetchBlogs = () => async dispatch => {\n  try {\n    dispatch({\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_REQUEST\n    });\n    const response = await fetch(\"http://localhost:7000/Blogs\");\n    const dataBlogs = await response.json();\n    dispatch({\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_SUCCESS,\n      payload: dataBlogs\n    });\n  } catch (error) {\n    dispatch({\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_FAILURE,\n      payload: error.message\n    });\n  }\n};\nexport const fetchSingleBlog = () => dispatch => {\n  try {\n    dispatch({\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_REQUEST\n    });\n    const resp = fetch(`http://localhost:7000/Blogs/${id}`);\n    const data = resp.json();\n    dispatch({\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_SUCCESS,\n      payload: data\n    });\n  } catch (error) {}\n  async function fetchSingleBlog() {\n    try {\n      // API data request\n      dispatch({\n        type: \"FETCH_DATA_REQUEST\"\n      });\n      const response = await fetch();\n      const responseData = await response.json();\n\n      // Fetching blog, Success\n      dispatch({\n        type: \"FETCH_DATA_SUCCESS_SINGLE\",\n        payload: responseData\n      });\n    } catch (error) {\n      // Fetching blog, Failure\n      dispatch({\n        type: \"FETCH_DATA_FAILURE\",\n        payload: error.message\n      });\n      console.log(error);\n    }\n  }\n};","map":{"version":3,"names":["BLOGS_CONSTANTS","FetchBlogs","dispatch","type","BLOGS_FETCH_DATA_REQUEST","response","fetch","dataBlogs","json","BLOGS_FETCH_DATA_SUCCESS","payload","error","BLOGS_FETCH_DATA_FAILURE","message","fetchSingleBlog","resp","id","data","responseData","console","log"],"sources":["C:/Users/User/Desktop/Estarta Training Program - ReactJs/Projects/estarta-blogger/src/redux/reducers/BlogsReducer/actions.js"],"sourcesContent":["// blogs reducer constants\r\nimport * as BLOGS_CONSTANTS from \"./constants\";\r\n\r\nexport const FetchBlogs = () => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_REQUEST,\r\n    });\r\n\r\n    const response = await fetch(\"http://localhost:7000/Blogs\");\r\n    const dataBlogs = await response.json();\r\n\r\n    dispatch({\r\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_SUCCESS,\r\n      payload: dataBlogs,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_FAILURE,\r\n      payload: error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const fetchSingleBlog = () => (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_REQUEST,\r\n    });\r\n\r\n    const resp = fetch(`http://localhost:7000/Blogs/${id}`);\r\n    const data = resp.json();\r\n\r\n    dispatch({\r\n      type: BLOGS_CONSTANTS.BLOGS_FETCH_DATA_SUCCESS,\r\n      payload: data\r\n    });\r\n  } catch (error) {}\r\n  async function fetchSingleBlog() {\r\n    try {\r\n      // API data request\r\n      dispatch({ type: \"FETCH_DATA_REQUEST\" });\r\n\r\n      const response = await fetch();\r\n      const responseData = await response.json();\r\n\r\n      // Fetching blog, Success\r\n      dispatch({ type: \"FETCH_DATA_SUCCESS_SINGLE\", payload: responseData });\r\n    } catch (error) {\r\n      // Fetching blog, Failure\r\n      dispatch({ type: \"FETCH_DATA_FAILURE\", payload: error.message });\r\n      console.log(error);\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,eAAe,MAAM,aAAa;AAE9C,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAClD,IAAI;IACFA,QAAQ,CAAC;MACPC,IAAI,EAAEH,eAAe,CAACI;IACxB,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC;IAC3D,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;IAEvCN,QAAQ,CAAC;MACPC,IAAI,EAAEH,eAAe,CAACS,wBAAwB;MAC9CC,OAAO,EAAEH;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdT,QAAQ,CAAC;MACPC,IAAI,EAAEH,eAAe,CAACY,wBAAwB;MAC9CF,OAAO,EAAEC,KAAK,CAACE;IACjB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAOZ,QAAQ,IAAK;EACjD,IAAI;IACFA,QAAQ,CAAC;MACPC,IAAI,EAAEH,eAAe,CAACI;IACxB,CAAC,CAAC;IAEF,MAAMW,IAAI,GAAGT,KAAK,CAAE,+BAA8BU,EAAG,EAAC,CAAC;IACvD,MAAMC,IAAI,GAAGF,IAAI,CAACP,IAAI,EAAE;IAExBN,QAAQ,CAAC;MACPC,IAAI,EAAEH,eAAe,CAACS,wBAAwB;MAC9CC,OAAO,EAAEO;IACX,CAAC,CAAC;EACJ,CAAC,CAAC,OAAON,KAAK,EAAE,CAAC;EACjB,eAAeG,eAAeA,CAAA,EAAG;IAC/B,IAAI;MACF;MACAZ,QAAQ,CAAC;QAAEC,IAAI,EAAE;MAAqB,CAAC,CAAC;MAExC,MAAME,QAAQ,GAAG,MAAMC,KAAK,EAAE;MAC9B,MAAMY,YAAY,GAAG,MAAMb,QAAQ,CAACG,IAAI,EAAE;;MAE1C;MACAN,QAAQ,CAAC;QAAEC,IAAI,EAAE,2BAA2B;QAAEO,OAAO,EAAEQ;MAAa,CAAC,CAAC;IACxE,CAAC,CAAC,OAAOP,KAAK,EAAE;MACd;MACAT,QAAQ,CAAC;QAAEC,IAAI,EAAE,oBAAoB;QAAEO,OAAO,EAAEC,KAAK,CAACE;MAAQ,CAAC,CAAC;MAChEM,OAAO,CAACC,GAAG,CAACT,KAAK,CAAC;IACpB;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}